package programmers.레벨2

import kotlin.math.ceil

/*
△△ 게임대회가 개최되었습니다. 이 대회는 N명이 참가하고, 토너먼트 형식으로 진행됩니다.
N명의 참가자는 각각 1부터 N번을 차례대로 배정받습니다. 그리고, 1번↔2번, 3번↔4번, ... , N-1번↔N번의 참가자끼리 게임을 진행합니다.
각 게임에서 이긴 사람은 다음 라운드에 진출할 수 있습니다. 이때, 다음 라운드에 진출할 참가자의 번호는 다시 1번부터 N/2번을 차례대로 배정받습니다.
만약 1번↔2번 끼리 겨루는 게임에서 2번이 승리했다면 다음 라운드에서 1번을 부여받고,
3번↔4번에서 겨루는 게임에서 3번이 승리했다면 다음 라운드에서 2번을 부여받게 됩니다. 게임은 최종 한 명이 남을 때까지 진행됩니다.

이때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 궁금해졌습니다.
게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B가 함수 solution의 매개변수로 주어질 때,
처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 return 하는 solution 함수를 완성해 주세요.
단, A번 참가자와 B번 참가자는 서로 붙게 되기 전까지 항상 이긴다고 가정합니다.

제한사항
N : 21 이상 220 이하인 자연수 (2의 지수 승으로 주어지므로 부전승은 발생하지 않습니다.)
A, B : N 이하인 자연수 (단, A ≠ B 입니다.)
 */

class 레벨2_대진표 {
    fun 내풀이(n: Int, a: Int, b: Int): Int {
        var answer = 0
        var doubleA: Double = a.toDouble()
        var doubleB: Double = b.toDouble()


        while (doubleA != doubleB) {
            answer++
            doubleA = ceil(doubleA / 2)
            doubleB = ceil(doubleB / 2)
        }

        return answer
    }

    fun 다른풀이1(n: Int, a: Int, b: Int): Int {
        var answer = 0
        var x = a
        var y = b
        while (x != y) {
            x = (x + 1) / 2
            y = (y + 1) / 2
            answer++
        }
        return answer
    }


//      -1을 통해 2진법으로 변환했을 때의 자릿수를 맞춰준다. n이 2의 8승이라면 결승라운드 기준으로 왼쪽은 2의 7승까지,
//      오른쪽은 2의 7승+1부터 2의 8승이므로 -1을 통해서 자릿수를 맞춰준다.
//      xor 연산은 같을 경우 0 다를경우 1이므로 최상단에서 만나는지 확인할 수 있다.
//      ex) 11 xor 10 = 01, 1100 xor 110 = 1011
//      결승선을 기준으로 한 라운드 씩 내려가면서 2로 나눈 오른쪽 왼쪽에서 만나는지 확인하는 절차를 거쳐서 다르면 1이 남으므로
//      해당 자릿수를 기준으로 2진법 String의 길이를 반환하면 만나는 라운드를 구할 수 있다.

    fun 다른풀이2(n: Int, a: Int, b: Int) = ((a - 1) xor (b - 1)).toString(2).length
}